git remote add origin https://github.com/LL8054/datasciencecoursera.git
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
## This is a markdown file
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
git remote add origin https://github.com/LL8054/datasciencecoursera.git
git push -u origin master
q()
install.packages("KernSmooth"")
library(kernsmooth)
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_lis
cls_list
class(cls_list)
cls_list
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls-vect)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- [,19:23]
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,5,5,5,6,6,6))
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_ vals <- lapply(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem elem[2]))
lapply(unique_vals, function(elem) elem[2]))
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric)1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmass, summary)
exit
bye()
library(datasets)
datasets(iris)
data(iris)
?iris
iris
tapply(sepal.length, species, mean)
tapply(Sepal.Length, Species, mean)
tapply(iris, Sepal.Length, Species, mean)
tapply(iris, Sepal.Length, mean)
tapply(iris$sepal.length, iris$species, mean)
tapply(iris$Speal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[1:4]1, mean)
apply(iris[1:4],1, mean)
apply(iris[1:4],2, mean)
?apply
apply(iris[,1:4],2, mean)
apply(iris, 2, mean)
apply(iris,1,mean)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
[tapply(mtcars$hp,mtcars$cyl,mean),1] - [tapply(mtcars$hp,mtcars$cyl,mean),3]
i <- tapply(mtcars$mpg,mtcars$cyl,mean)
i
i[3]-i[1]
tapply(mtcars$hp,mtcars$cyl,mean),[1] - tapply(mtcars$hp,mtcars$cyl,mean),[3]
tapply(mtcars$hp,mtcars$cyl,mean)[1] - tapply(mtcars$hp,mtcars$cyl,mean)[3]
tapply(mtcars$hp,mtcars$cyl,mean)[3]
rm(i)
i
i <- tapply(mtcars$hp, mtcars$cyl, mean)
i
i[3] - i[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mcars$hp, mtcars$cyl, mean)[1]
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mtcars$hp, mtcars$cyl, mean)[1]
debug(ls)
ls
debug(ls)
ls(2)
bye()
exit
close
close()
exit()
quit()
quit
quit
library("swirl")
swirl()
quit9)
quit()
install.packages("RMySQL")
Sys.setenv(PKG_CPPFLAGS = "-I/usr/local/include/mysql")
Sys.setenv(PKG_LIBS = "-L/usr/local/lib -lmysqlclient")
install.packages("RMySQL", type = "source")
library(RMySQL)
library(DBI)
library(RMySQL)
example(points)
?gl
?par
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?splom
?print.trellis()
?plom
?splom
?trellis.par.set
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
library(ggplot2)
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
install.packages("lattice")
library("lattice")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
str(movies)
g
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
summary(g)
g + geom_point()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom(smooth)
qplot(votes, rating, data = movies) + geom_smooth()
?llines()
?axis
?llines()
install.packages("myplclust")
library(myplclust)
install.packages("rcolorbrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
setwd("~/datasciencecoursera/Courses/ReproducibleResearch/RepData_PeerAssessment1")
data <- read.csv("activity.csv", stringsAsFactors=FALSE)
library(plyr)
library(dplyr)
library(ggplot2)
data$date <- as.POSIXct(data$date, format = "%Y-%m-%d")
#Turn data into tbl_df
data <- tbl_df(data)
View(data)
NAset <- filter(data, steps=="NA", date=="NA", interval=="NA")
NAset <- filter(data, is.NA(steps), is.NA(date), is.NA(interval))
?is.na
NAset <- filter(data, is.na(steps), is.na(date), is.na(interval))
?filter
View(NAset)
NAset <- data[-complete.cases(data),]
NAset <- data[complete.cases(data),]
row.has.na <- apply(data, 1, function(x){any(is.na(x))})
sum(row.has.na)
new <- data[!row.has.na,]
?identical
identical(new, NAset)
intervals <- ddply(data, .(interval), summarize, steps = sum(steps, na.rm=TRUE))
View(intervals)
NArows
sum(NArows)
NArows <- apply(data, 1, function(x){any(is.na(x))})
sum(NArows)
View(NAset)
View(new)
View(new)
View(data)
View(NAset)
View(data)
NAset <- data[NArows]
NAset <- data[NArows,]
View(NAset)
new <- merge(NAset, intervals)
new
View(NAset)
View(intervals)
View(NAset)
View(intervals)
View(NAset)
View(intervals)
?merge
new <- merge(NAset, intervals, by="interval")
new
head(new)
new <- new[-new$steps.x]
new <- select(new, -steps.x)
new
head(new)
new <- merge(NAset, intervals, by="interval")
new
head(new)
new <- select(new, steps.y, date, interval)
head(new)
new$steps.y <- colname(new$steps)
colnames
new$steps.y <- colnames(new$steps)
head(new)
new <- merge(NAset, intervals, by="interval")
new <- select(new, steps.y, date, interval)
head(new)
colnames(new)["steps.y"] <- "steps"
colnames(new$steps.y) <- "steps"
colnames(new)[1] <- "steps"
head(new)
completeset <- data[!NArows,]
rm(completeset)
completeSet <- data[!NArows,]
newdata <- rbind(new, completeSet)
newData <- rbind(new, completeSet)
rm(newdata)
?arrange
arrange(newData, date, intervals)
View(newData)
class(newData$date)
class(newData$intervals)
class(new$intervals)
class(NAset$intervals)
class(data$intervals)
class(data$interval)
class(NAset$interval)
class(new$interval)
class(newData$interval)
arrange(newData, date, interval)
head(arrange(newData, date, interval))
newData <- arrange(newData, date, interval)
View(newData)
View(newData)
newSteps <- ddply(newData, .(date), summarize, steps = sum(steps, na.rm=TRUE))
View(newSteps)
View(newData)
View(intervals)
newSteps <- ddply(newData, .(date), summarize, steps = sum(steps, na.rm=TRUE))
View(newSteps)
intervals <- ddply(data, .(interval), summarize, steps = mean(steps, na.rm=TRUE))
intervals <- arrange(intervals, desc(steps))
new <- merge(NAset, intervals, by="interval")
new <- select(new, steps.y, date, interval)
colnames(new)[1] <- "steps"
newData <- rbind(new, completeSet)
newData <- arrange(newData, date, interval)
newSteps <- ddply(newData, .(date), summarize, steps = sum(steps, na.rm=TRUE))
View(newSteps)
newSteps <- ddply(data, .(date), summarize, steps = sum(steps, na.rm=TRUE))
View(newSteps)
View(data)
newSteps <- ddply(newData, .(date), summarize, steps = sum(steps, na.rm=TRUE))
View(newSteps)
by_date <- group_by(data, date)
asteps <- summarize(by_date, sum(steps, na.rm=TRUE))
View(asteps)
View(newData)
?weekdays
newData <- mutate(newData, type=weekdays(date))
View(newData)
newData <- mutate(newData, day=weekdays(date))
View(newData)
newData <- select(newData, -type)
View(newData)
?any
WE <- apply(newData, 1, function(x){any(x=="Saturday" | "Sunday")})
WE <- apply(newData, 1, function(x){if(any(x=="Saturday" | "Sunday")}))
WE <- apply(newData, 1, function(x){if(any(x=="Saturday" | "Sunday"))})
WE <- apply(newData, 1, function(x){if(any(x="Saturday" | "Sunday"))})
WE <- apply(newData, 1, function(x){if(x="Saturday" | "Sunday")})
WE <- apply(newData, 1, function(x){if(x=="Saturday" | "Sunday")})
?ifelse
newData <- mutate(newData, type=ifelse(day=="Saturday" | "Sunday", "Weekend", "Weekday"))
class(newData$day)
newData$type <- ifelse(newData$day == "Saturday" | "Sunday", "Weekend", "Weekday")
newData <- mutate(newData, type=ifelse(day=="Saturday" | day=="Sunday", "Weekend", "Weekday"))
View(newData)
newData$type <- as.factor(newData$type)
class(newData$type)
View(newData)
splitIntervals <- ddply(newData, .(interval + type), summarize, steps = mean(steps))
splitIntervals <- ddply(newData, .(interval) + .(type), summarize, steps = mean(steps))
splitIntervals <- ddply(newData, .(interval) + (type), summarize, steps = mean(steps))
?ddply
splitIntervals <- ddply(newData, .(interval, type), summarize, steps = mean(steps))
View(splitIntervals)
class(splitIntervals$steps)
ggplot(splitIntervals, aes(interval, steps, type)) + geom_line(stat = "identity", color ="purple") + theme_bw() + labs(title = "Average # Steps Per 5 Minutes", x="5 Minute Intervals", y="Avg # Steps") + theme(title = element_text(face="bold", color="purple"), axis.title.x = element_text(face="bold", color="purple"), axis.title.y = element_text(face="bold", color="purple")) + facet_wrap( ~type)
ggplot(splitIntervals, aes(interval, steps, type)) + geom_line(stat = "identity", color ="purple") + theme_bw() + labs(title = "Average # Steps Per 5 Minutes", x="5 Minute Intervals", y="Avg # Steps") + theme(title = element_text(face="bold", color="purple"), axis.title.x = element_text(face="bold", color="purple"), axis.title.y = element_text(face="bold", color="purple")) + facet_wrap( ~type, ncol=1)
